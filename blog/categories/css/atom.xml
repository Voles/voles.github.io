<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | Niels Dequeker]]></title>
  <link href="http://voles.github.io/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://voles.github.io/"/>
  <updated>2015-07-08T19:56:07+02:00</updated>
  <id>http://voles.github.io/</id>
  <author>
    <name><![CDATA[Niels Dequeker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sass for Terminal dummies]]></title>
    <link href="http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies/"/>
    <updated>2011-05-11T20:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies</id>
    <content type="html"><![CDATA[<p>A while ago, there were some posts on <a href="http://www.forrst.com" title="Forrst">Forrst</a> about LESS. <a href="http://www.lesscss.org/" title="Less">LESS</a> is a tool, made to add extra functionality to CSS. Until now I only wrote <em>static</em> CSS-files, sometimes with over 1500 lines of code for a simple website. To make the stylesheet more readable, I grouped codeblocks, used comments, added extra indent with tabs, etc.</p>

<p>Splitting up the stylesheet in separate files is also an option to keep everything structured, but that adds a lot of extra HTTP-request.</p>

<p>Recently, one of our teachers told us about <a href="http://sass-lang.com/" title="Sass">Syntactically Awesome Stylesheets (Sass)</a>. It is more or less the same as LESS, the main difference is that LESS uses the CSS syntax and Sass uses its own syntax. But it’s possible to use CSS-syntax with <a href="http://sass-lang.com/docs/yardoc/file.SCSS_FOR_SASS_USERS.html" title="Scss">SCSS</a>.</p>

<p>I was (and still am) very excited about it, and I&rsquo;d like to share both my experience and knowledge with the rest of the world.</p>

<h3>What is Sass?</h3>

<blockquote><p>Sass makes CSS fun again. Sass is an extension of CSS3, adding <a href="http://sass-lang.com/#nesting" title="Sass nesting">nested rules</a>, <a href="http://sass-lang.com/#variables" title="variables">variables</a>, <a href="http://sass-lang.com/#mixins" title="Sass mixins">mixins</a>, <a href="http://sass-lang.com/#extend" title="selector inheritance">selector inheritance</a>, <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html" title="More information about Sass">and more</a>. It’s translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.</p>

<p><cite><a href="http://www.sass-lang.com" title="Sass homepage">sass-lang.com</a></cite></p></blockquote>

<h3>Compass</h3>

<p>One of the disadvantages of pure CSS was that if you import other CSS-files, you create extra HTTP-requests. Compass is a framework that makes it possible to compile all your imported CSS-files into one CSS-file.</p>

<p>I think there is no reasen why you wouldn’t use Compass if you work with Sass.</p>

<h3>Using Sass</h3>

<p>To use Sass first create two new folders <code>css</code> and <code>sass</code>. In the same directory, create a file named <code>config.rb</code>. Add these lines to the file:</p>

<p>{% codeblock lang:ruby %}
css_dir = &ldquo;css&rdquo;
sass_dir = &ldquo;sass&rdquo;
output_style = :compressed
{% endcodeblock %}</p>

<p>The first line refers to the directory were your final CSS-file will be compiled to. The second line tells where your .scss-files are stored.</p>

<p>The last line tells the compiler to compress the final CSS-file, so you will save some bandwith (which is important for mobile-applications).</p>

<p>Now make a file named <code>screen.scss</code> in the directory <code>sass/</code>. Here you can write CSS-code like you did before.</p>

<p>Now we first have to install Sass and Compass. Type these two commands in the Terminal, to install both Ruby Gems.</p>

<p>{% codeblock %}
$ sudo gem install haml
$ sudo gem install compass
{% endcodeblock %}</p>

<p>To compile the file, we&rsquo;ll use Terminal. Go to the folder <code>sass</code> we have just created. To change the current directory, type the command <code>cd</code> and then   the path you want to go to. E.g. <code>cd /Applications/MAMP/htdocs/my-first-sass-project</code>.</p>

<p>Next, we have to compile the <code>screen.scss-file</code>. We will compile the file using Compass. Use the commando <code>compass compile sass/screen.scss</code> to compile your scss-file.</p>

<p>Now look at your <code>css-folder</code>. There should be a file named <code>screen.css</code>, with your previously written CSS-code, compressed.</p>

<p>That’s it. If you don’t want to manually compile the .scss-file after you saved it, you can use the commando ‘watch’. Use <code>compass watch sass/screen.scss</code> to automatically compile your sass-file when you make some changes (and save the file).</p>

<p>Sass offers some great build-in functions for <a href="http://nex-3.com/posts/89-powerful-color-manipulation-with-sass" title="color-manipulations">color manipulations</a>, be sure to check it out if you want to learn more about it.</p>

<h3>Sass functions</h3>

<p><strong>Variables</strong><br/>
You can declare variables and use them everywhere in your .scss-file. This can come in handy when you wan to use the same colors over and over again for e.g. headings, links, menu&hellip;</p>

<p><strong>Nesting</strong><br/>
You can write much cleaner CSS-code with nesting.</p>

<p>{% codeblock lang:css %}
ul.message {
  li.warning {
    color: yellow;
  }</p>

<p>  li.error {
    color: red;
  }</p>

<p>  li.success {
    color: green;
  }
}
{% endcodeblock %}</p>

<p><strong>Mixins</strong><br/>
Mixins are like functions. You can pass some parameters and it gives you the result you want.
{% codeblock lang:css %}
@makebox ($background, $border, $width) {
  background: $background;
  border: 1px solid $border;
  width: $width;
}</p>

<h1>boxA {</h1>

<p>  @include makebox(#FF0000, #000000, 150);
}</p>

<h1>boxB {</h1>

<p>  @include makebox(#00FF00, #CCCCCC, 375);
}
{% endcodeblock %}</p>

<p><strong>Inheritance</strong><br/>
It is possible to extend selectors from other selectors.</p>

<p>{% codeblock lang:css %}
.blue {
  background: #0000FF;
  border: 10px dashed #0000FF;
}</p>

<h1>box {</h1>

<p>  @extend .blue;
  width: 160px;
}
{% endcodeblock %}</p>

<p>If you like what you see, be sure to take a look at these resources to learn Sass. The most complicated part is installing / compiling the files. Most other things speak for themselves.</p>

<h3>Further reference</h3>

<ul>
<li><a href="" title="http://sass-lang.com/' 'Sass homepage">Sass homepage</a></li>
<li><a href="" title="http://www.lesscss.org/' 'LESS CSS homepage">LESS homepage</a></li>
<li><a href="" title="http://blog.danielfischer.com/2011/04/18/quickstart-guide-to-using-compass-haml-sass-scss-with-rails-3/' 'Quickstart guide to Sass">Quickstart guide to Sass</a></li>
</ul>


<p>Feel free to leave a comment with your thoughts on Sass. I hope you&rsquo;ve enjoyed this one!</p>
]]></content>
  </entry>
  
</feed>
