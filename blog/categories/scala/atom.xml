<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: scala | Niels Dequeker]]></title>
  <link href="http://voles.github.io/blog/categories/scala/atom.xml" rel="self"/>
  <link href="http://voles.github.io/"/>
  <updated>2015-07-08T19:56:07+02:00</updated>
  <id>http://voles.github.io/</id>
  <author>
    <name><![CDATA[Niels Dequeker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First steps into Functional Programming]]></title>
    <link href="http://voles.github.io/blog/2013/04/14/functional-programming/"/>
    <updated>2013-04-14T21:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/04/14/functional-programming</id>
    <content type="html"><![CDATA[<p>At the end of last year, I’ve been introduced to Functional Programming (FP) by a former collegue.
He told me that it forces you to think in a different way, when writing code. Curious as I was, I decided to take the <a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Functional Programming course</a> on Coursera, to learn more about it.</p>

<p>The teacher is <a href="http://en.wikipedia.org/wiki/Martin_Odersky," title="Martin Odersky">Martin Odersky</a> (designer of the Scala programming language), who gives several video lectures every week.
What takes most of my time are the weekly assignments. Usually I solve the problems with pen and paper, and write the actual code afterwards.</p>

<h3>What is Functional Programming</h3>

<p>There are three main programming paradigms. A paradigm describes distinct concepts or thought patterns in some scientific discipline. I&rsquo;ll briefly describe two of them below.</p>

<h4>Imperative programming</h4>

<p>You probably know imperative programming from languages such as PHP, Python, Java…<br/>
These are about:</p>

<ul>
<li>modifying mutable variables</li>
<li>using assignments</li>
<li>control structures such as if-then-else, loops, break, continue, return</li>
</ul>


<h4>Functional programming</h4>

<p>In a restricted sense, functional programming means programming without mutable variables, assignments, loops and other imperative control structures.</p>

<p>In a wider sense, functional programmingmeans focusing on the functions. Functions can be values that are produced, consumed, and composed. All this becomes easier in a functional language.</p>

<h3>FP concepts in Python</h3>

<p>As a web developer, I’ve spend a lot of time working with PHP, JavaScript etc.
But ever since I’ve started to work with Python, I’ve got in touch with <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" title="Python list comprehension">list comprehension</a>, generators and iterators. These are all concepts of Functional Programming.</p>

<p>It provides new ways to work with data, which results in more elegant and compact code, which in turn is better readable.</p>

<h3>Personal experience</h3>

<p>With what I&rsquo;ve learned, I found out that I could apply these FP concepts throughout most of my code. Still four weeks to go on the course, but the more I learn about it, the more it fascinates me.</p>

<p>Learning Functional Programming really feels like a great step forward to me.</p>

<h3>Further reference</h3>

<ul>
<li><p><a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Progfun</a><br/>
The Functional Programming course on Coursera</p></li>
<li><p><a href="http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf" title="Why Functional Programming Matters">Why Functional Programming Matters</a><br/>
A paper by John Hughes from 1984</p></li>
<li><p><a href="http://learnyouahaskell.com/chapters%20'Learn%20Haskell">Learn Haskell</a><br/>
Great introduction into Haskell, a functional programming language</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
