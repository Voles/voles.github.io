<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Niels Dequeker]]></title>
  <link href="http://voles.github.io/atom.xml" rel="self"/>
  <link href="http://voles.github.io/"/>
  <updated>2013-04-14T22:47:58+02:00</updated>
  <id>http://voles.github.io/</id>
  <author>
    <name><![CDATA[Niels Dequeker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First steps into Functional Programming]]></title>
    <link href="http://voles.github.io/blog/2013/04/14/functional-programming/"/>
    <updated>2013-04-14T21:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/04/14/functional-programming</id>
    <content type="html"><![CDATA[<p>At the end of last year, I’ve been introduced to Functional Programming (FP) by a former collegue.
He told me that it forces you to think in a different way, when writing code. Curious as I was, I decided to take the <a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Functional Programming course</a> on Coursera, to learn more about it.</p>

<p>The teacher is <a href="http://en.wikipedia.org/wiki/Martin_Odersky," title="Martin Odersky">Martin Odersky</a> (designer of the Scala programming language), who gives several video lectures every week.
What takes most of my time are the weekly assignments. Usually I solve the problems with pen and paper, and write the actual code afterwards.</p>

<h3>What is Functional Programming</h3>

<p>There are three main programming paradigms. A paradigm describes distinct concepts or thought patterns in some scientific discipline. I&#8217;ll briefly describe two of them below.</p>

<h4>Imperative programming</h4>

<p>You probably know imperative programming from languages such as PHP, Python, Java…<br/>
These are about:</p>

<ul>
<li>modifying mutable variables</li>
<li>using assignments</li>
<li>control structures such as if-then-else, loops, break, continue, return</li>
</ul>


<h4>Functional programming</h4>

<p>In a restricted sense, functional programming means programming without mutable variables, assignments, loops and other imperative control structures.</p>

<p>In a wider sense, functional programmingmeans focusing on the functions. Functions can be values that are produced, consumed, and composed. All this becomes easier in a functional language.</p>

<h3>Starting with Python</h3>

<p>As a web developer, I’ve spend a lot of time working with PHP, JavaScript etc.
But ever since I’ve started to work with Python, I’ve got in touch with <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions," title="Python list comprehension">list comprehension</a>, generators and iterators. These are all concepts of Functional Programming.</p>

<p>It provides new ways to work with data, which results in more elegant and compact code, which in turn is better readable.</p>

<h3>Personal experience</h3>

<p>With what I&#8217;ve learned I found out that I could apply these FP concepts throughout most of my code.</p>

<p>Programming on itself is so big. The more I learn, the more it fascinates me. Functional Programming is yet another step forward to me.</p>

<h3>Further reference</h3>

<ul>
<li><p><a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Progfun</a><br/>
The Functional Programming course on Coursera</p></li>
<li><p><a href="http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf" title="Why Functional Programming Matters">Why Functional Programming Matters</a><br/>
A paper by John Hughes from 1984</p></li>
<li><p><a href="http://learnyouahaskell.com/chapters%20'Learn%20Haskell">Learn Haskell</a><br/>
Introduction into Haskell, a functional programming language</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drag &amp; drop with AIR]]></title>
    <link href="http://voles.github.io/blog/2011/10/18/drag-and-drop-with-air/"/>
    <updated>2011-10-18T10:52:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/10/18/drag-and-drop-with-air</id>
    <content type="html"><![CDATA[<p>This is a small blogpost on how to implement drag and drop functionality in an AIR-application. It can be used to make an application much more easier to work with.</p>

<p>At first, you have to add two event listeners to the component, <code>NATIVE_DRAG_ENTER</code> and <code>NATIVE_DRAG_DROP</code>. Both of them are <code>NativeDragEvents</code>.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">addEventListener</span><span class="o">(</span><span class="n">NativeDragEvents</span><span class="o">.</span> <span class="n">NATIVE_DRAG_ENTER</span><span class="o">,</span> <span class="n">nativedragenterHandler</span><span class="o">);</span>
</span><span class='line'><span class="n">addEventListener</span><span class="o">(</span><span class="n">NativeDragEvents</span><span class="o">.</span> <span class="n">NATIVE_DRAG_DROP</span><span class="o">,</span> <span class="n">nativedragdropHandler</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>nativedragenterHandler</code> will be triggered whenever a user hovers the component with one or more files selected. The <code>nativedragdropHandler</code> will be triggered when the user ‘drops’ his files on this component.</p>

<p>Put this code in the <code>nativedragenterHandler</code>, to let the component accept a user to drop his files here.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">DragManager</span><span class="o">.</span><span class="na">acceptDragDrop</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything else happens in the <code>nativedragdropHandler</code>. The code below shows you how to fetch the dropped files, so you can work with them in the application.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">var</span> <span class="n">droppedFiles</span><span class="p">:</span><span class="kt">Array</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">clipboard</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">ClipboardFormats</span><span class="o">.</span><span class="na">FILE_LIST_FORMAT</span><span class="o">)</span> <span class="k">as</span> <span class="n">Array</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a AS3 project with Flash Builder]]></title>
    <link href="http://voles.github.io/blog/2011/07/14/setting-up-a-as3-project-with-flash-builder/"/>
    <updated>2011-07-14T20:03:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/07/14/setting-up-a-as3-project-with-flash-builder</id>
    <content type="html"><![CDATA[<h2>Basic setup</h2>

<p>First we have to create a new project in <strong>Flash Builder</strong>, go to <em>File</em> <strong>→</strong> <em>New</em> <strong>→</strong> <em>ActionScript Project</em>.</p>

<p>You will see a dialog where you can fill in your project details. Fill in your <em>Project name</em> and press the <em>Next</em> button.</p>

<p><img src="http://voles.github.io/images/posts/project-name.png" title="'Project name'" ></p>

<p>Change the <em>Main application file</em> to <em>Main.as</em>, this is just a convention. Press finish to complete your project setup.</p>

<p><img src="http://voles.github.io/images/posts/main-application-file.png" title="'Main application file'" ></p>

<h2>Flash Library</h2>

<p>Now, the only thing we have is an empty AS3-project. We can use Flash Builder to write our classes etc., but most projects will need some graphics. Thats where the Flash IDE comes in.</p>

<p>Make a new .fla-file and make a MovieClip with a very basic drawing in it. Go to the properties of the MovieClip.</p>

<p>Tick <em>Export for ActionScript</em> and change the classname (‘Class’) to &#8216;SimpleShape’. You schould have something like this:</p>

<p><img src="http://voles.github.io/images/posts/mc-properties.png" title="'MovieClip properties'" ></p>

<p>Because we want to use the library of this .fla-file with Flash Builder, we have to make a .swc-file. You can learn more about .swc-files in this <a href="http://stackoverflow.com/questions/1340866/what-is-a-flash-swc-file-and-how-is-it-used" title="Stackoverflow question, what is swc and how is it used">Stackoverflow question</a>.</p>

<p>To let your .fla-file generate a .swc-file, go to <em>File</em> <strong>→</strong> <em>Publish Settings</em>. Next, go to the <em>Flash</em>-tab and thick <em>Export SWC</em>.</p>

<p><img src="http://voles.github.io/images/posts/publish-settings.png" title="'Publish settings'" ></p>

<p>Press the <em>OK</em>-button. Every time you change something in your .swf-file, you will have to publish your .swc-file again to make sure it contains the latest updates of your library. You can generate a .swc-file with the shortcut <em>command + return</em>.</p>

<h2>Link the SWC to your Flash Builder project</h2>

<p>Go back to Flash Builder and make a new folder named ‘libs’ in your project. Here you can put all your resources for the project. The structure of your project should look like this:</p>

<p><img src="http://voles.github.io/images/posts/project-structure.png" title="'Project structure'" ></p>

<p>Go back to the Flash IDE and save your .fla-file in the folder <em>libs</em> you have just created in your Flash Builder project. The location of your project depends on your workspace in Flash Builder.</p>

<p>Save the .fla-file as <em>library.fla</em> and again create a .swc-file (<em>command + return</em>). Go back to Flash Builder and your project structure now should look like this:</p>

<p><img src="http://voles.github.io/images/posts/libs-folder.png" title="'Libs folder'" ></p>

<p>Now we must let the project know that he can use the .swc-files in the <em>libs</em>-folder. Right-click on the name of the project, go to <em>Properties</em>. Go to the <em>ActionScript Build Path</em>-tab and then to the <em>Library path</em>-view. Click <em>Add SWC Folder</em> and select your <em>libs</em>-folder. You should see this:</p>

<p><img src="http://voles.github.io/images/posts/build-path.png" title="'Actionscript build path'" ></p>

<p>Now your .swc-file is linked with your Flash Builder project, click <em>Ok</em>.</p>

<h2>Preloader</h2>

<p>We have a very small .swc-file, with only one MovieClip. But when you have lots and lots of graphics, MovieClips and sound, your .swc-file will soon become bigger. When your .swf-file is loading all these data, we want to give the user some feedback. We can do this by making a preloader.</p>

<p>In the constructor of your Main.as, add these lines of code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// stage</span>
</span><span class='line'><span class="n">stage</span><span class="o">.</span><span class="na">scaleMode</span> <span class="o">=</span> <span class="n">StageScaleMode</span><span class="o">.</span><span class="na">NO_SCALE</span><span class="o">;</span>
</span><span class='line'><span class="n">stage</span><span class="o">.</span><span class="na">align</span> <span class="o">=</span> <span class="n">StageAlign</span><span class="o">.</span><span class="na">TOP_LEFT</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">loaderInfo</span><span class="o">.</span><span class="na">bytesLoaded</span> <span class="o">&gt;</span> <span class="n">loaderInfo</span><span class="o">.</span><span class="na">bytesTotal</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// swf is already loaded</span>
</span><span class='line'>  <span class="n">preloaderCompleteHandler</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// preloader methods</span>
</span><span class='line'>  <span class="n">loaderInfo</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">Event</span><span class="o">.</span><span class="na">COMPLETE</span><span class="o">,</span> <span class="n">preloaderCompleteHandler</span><span class="o">);</span>
</span><span class='line'>  <span class="n">loaderInfo</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">ProgressEvent</span><span class="o">.</span><span class="na">PROGRESS</span><span class="o">,</span> <span class="n">preloaderProgressHandler</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We look at the loaderInfo of the SWF tho check if all data is loaded. If not, we add two eventlisteners to the loaderInfo. Next, add these functions to the Main-class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Preloader progress</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">preloaderProgressHandler</span><span class="o">(</span><span class="n">event</span><span class="o">:</span><span class="kt">ProgressEvent</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nf">trace</span><span class="o">(</span><span class="s2">&quot;Preloader progress: &quot;</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="n">event</span><span class="o">.</span><span class="na">bytesLoaded</span> <span class="o">/</span> <span class="n">event</span><span class="o">.</span><span class="na">bytesTotal</span><span class="o">)</span> <span class="o">*</span> <span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot;%&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Preloader complete</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">preloaderCompleteHandler</span><span class="o">(</span><span class="n">event</span><span class="o">:</span><span class="kt">Event</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The progress-function contains some simple math to trace the progress of the preloader. You can also use this value so visualise the progress.</p>

<p>Now we have to write the preloaderCompleteHandler, but first a little more info about preloaders and Flash.</p>

<p>When the SWF is loading, it will not play until every classe you have used on the first frame is loaded. So we will add a second frame to the Flash Builder project, where you can use as much classes as you want. On the first frame, we will use as little classes as possible.</p>

<p>This way, the SWF will show the first frame (where we will show a preloader), and when everything is loaded, we jump to the second frame.</p>

<p>To make this work, we first have to make a second class, I name it ‘Application.as’ and put it in a package named ‘be.devine’.</p>

<p>Again, right click on your Flash Builder project and go to ‘Properties’. In the ‘ActionScript Compiler’-tab, put this in the ‘Additional compiler arguments’: “-frame &#8220;start&#8221; be.devine.Application”. This creates a second frame for your project. You should have this:</p>

<p><img src="http://voles.github.io/images/posts/compiler-arguments.png" title="'Additional compiler arguments'" ></p>

<p>Go to your Main.as class and change the superclass to ‘MovieClip’ instead of Sprite. You have to do this because we want multiple frames (one frame for the preloader and a second frame for the application itself) and a Sprite doesn’t have a timeline.</p>

<p>The last thing we have to write is the preloaderCompleteHandler. Add these lines to the function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// go to second frame</span>
</span><span class='line'><span class="n">gotoAndStop</span><span class="o">(</span><span class="s2">&quot;start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// application classname</span>
</span><span class='line'><span class="n">var</span> <span class="n">applicationClass</span><span class="o">:*</span> <span class="o">=</span> <span class="n">getDefinitionByName</span><span class="o">(</span><span class="s2">&quot;be.devine.Application&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// make the application</span>
</span><span class='line'><span class="n">var</span> <span class="n">application</span><span class="o">:*</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">applicationClass</span><span class="o">();</span>
</span><span class='line'><span class="n">addChild</span><span class="o">(</span><span class="n">application</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see I’ve used the asterisk, this is used like a ‘joker’. So the ‘application’ variable can be any class, but is doesn’t make a explicit reference to the Application-class. This makes sure the that the SWF will not wait until the Application-class is loaded before showing up the preloader.</p>

<h2>Testing the preloader</h2>

<p>To make sure the preloader is working properly, I’ve added a big image (3.8 MB) in the Application-class.</p>

<p>When you debug the project, you will see a lot of traces with the current status of te preloader, when the application is loaded, the Application-class will trace “Hello World”.</p>

<h2>Source files</h2>

<p>You can download <a href="http://voles.github.io/downloads/MyFirstActionscriptProject.zip">the example project</a> and play around with it.</p>

<p>I hope you learned something from this. Please, do not hesitate to comment with your opinion, doubts, feedback&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass for Terminal dummies]]></title>
    <link href="http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies/"/>
    <updated>2011-05-11T20:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies</id>
    <content type="html"><![CDATA[<p>A while ago, there were some posts on <a href="http://www.forrst.com" title="Forrst">Forrst</a> about LESS. <a href="http://www.lesscss.org/" title="Less">LESS</a> is a tool, made to add extra functionality to CSS. Until now I only wrote <em>static</em> CSS-files, sometimes with over 1500 lines of code for a simple website. To make the stylesheet more readable, I grouped codeblocks, used comments, added extra indent with tabs, etc.</p>

<p>Splitting up the stylesheet in separate files is also an option to keep everything structured, but that adds a lot of extra HTTP-request.</p>

<p>Recently, one of our teachers told us about <a href="http://sass-lang.com/" title="Sass">Syntactically Awesome Stylesheets (Sass)</a>. It is more or less the same as LESS, the main difference is that LESS uses the CSS syntax and Sass uses its own syntax. But it’s possible to use CSS-syntax with <a href="http://sass-lang.com/docs/yardoc/file.SCSS_FOR_SASS_USERS.html" title="Scss">SCSS</a>.</p>

<p>I was (and still am) very excited about it, and I&#8217;d like to share both my experience and knowledge with the rest of the world.</p>

<h3>What is Sass?</h3>

<blockquote><p>Sass makes CSS fun again. Sass is an extension of CSS3, adding <a href="http://sass-lang.com/#nesting" title="Sass nesting">nested rules</a>, <a href="http://sass-lang.com/#variables" title="variables">variables</a>, <a href="http://sass-lang.com/#mixins" title="Sass mixins">mixins</a>, <a href="http://sass-lang.com/#extend" title="selector inheritance">selector inheritance</a>, <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html" title="More information about Sass">and more</a>. It’s translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.</p>

<p><cite><a href="http://www.sass-lang.com" title="Sass homepage">sass-lang.com</a></cite></p></blockquote>

<h3>Compass</h3>

<p>One of the disadvantages of pure CSS was that if you import other CSS-files, you create extra HTTP-requests. Compass is a framework that makes it possible to compile all your imported CSS-files into one CSS-file.</p>

<p>I think there is no reasen why you wouldn’t use Compass if you work with Sass.</p>

<h3>Using Sass</h3>

<p>To use Sass first create two new folders <code>css</code> and <code>sass</code>. In the same directory, create a file named <code>config.rb</code>. Add these lines to the file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">css_dir</span> <span class="o">=</span> <span class="s2">&quot;css&quot;</span>
</span><span class='line'><span class="n">sass_dir</span> <span class="o">=</span> <span class="s2">&quot;sass&quot;</span>
</span><span class='line'><span class="n">output_style</span> <span class="o">=</span> <span class="ss">:compressed</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line refers to the directory were your final CSS-file will be compiled to. The second line tells where your .scss-files are stored.</p>

<p>The last line tells the compiler to compress the final CSS-file, so you will save some bandwith (which is important for mobile-applications).</p>

<p>Now make a file named <code>screen.scss</code> in the directory <code>sass/</code>. Here you can write CSS-code like you did before.</p>

<p>Now we first have to install Sass and Compass. Type these two commands in the Terminal, to install both Ruby Gems.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install haml
</span><span class='line'>$ sudo gem install compass</span></code></pre></td></tr></table></div></figure>


<p>To compile the file, we&#8217;ll use Terminal. Go to the folder <code>sass</code> we have just created. To change the current directory, type the command <code>cd</code> and then   the path you want to go to. E.g. <code>cd /Applications/MAMP/htdocs/my-first-sass-project</code>.</p>

<p>Next, we have to compile the <code>screen.scss-file</code>. We will compile the file using Compass. Use the commando <code>compass compile sass/screen.scss</code> to compile your scss-file.</p>

<p>Now look at your <code>css-folder</code>. There should be a file named <code>screen.css</code>, with your previously written CSS-code, compressed.</p>

<p>That’s it. If you don’t want to manually compile the .scss-file after you saved it, you can use the commando ‘watch’. Use <code>compass watch sass/screen.scss</code> to automatically compile your sass-file when you make some changes (and save the file).</p>

<p>Sass offers some great build-in functions for <a href="http://nex-3.com/posts/89-powerful-color-manipulation-with-sass" title="color-manipulations">color manipulations</a>, be sure to check it out if you want to learn more about it.</p>

<h3>Sass functions</h3>

<p><strong>Variables</strong><br/>
You can declare variables and use them everywhere in your .scss-file. This can come in handy when you wan to use the same colors over and over again for e.g. headings, links, menu&#8230;</p>

<p><strong>Nesting</strong><br/>
You can write much cleaner CSS-code with nesting.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span><span class="nc">.message</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">li</span><span class="o">.</span><span class="n">warning</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.success</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Mixins</strong><br/>
Mixins are like functions. You can pass some parameters and it gives you the result you want.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@makebox</span> <span class="o">(</span><span class="err">$</span><span class="nt">background</span><span class="o">,</span> <span class="err">$</span><span class="nt">border</span><span class="o">,</span> <span class="err">$</span><span class="nt">width</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">background</span><span class="o">:</span> <span class="err">$</span><span class="nt">background</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">border</span><span class="o">:</span> <span class="nt">1px</span> <span class="nt">solid</span> <span class="err">$</span><span class="nt">border</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">width</span><span class="o">:</span> <span class="err">$</span><span class="nt">width</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#boxA</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="n">makebox</span><span class="p">(</span><span class="m">#FF0000</span><span class="o">,</span> <span class="m">#000000</span><span class="o">,</span> <span class="m">150</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#boxB</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="n">makebox</span><span class="p">(</span><span class="m">#00FF00</span><span class="o">,</span> <span class="m">#CCCCCC</span><span class="o">,</span> <span class="m">375</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Inheritance</strong><br/>
It is possible to extend selectors from other selectors.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.blue</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#0000FF</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">dashed</span> <span class="m">#0000FF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#box</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">160px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you like what you see, be sure to take a look at these resources to learn Sass. The most complicated part is installing / compiling the files. Most other things speak for themselves.</p>

<h3>Further reference</h3>

<ul>
<li><a href="" title="http://sass-lang.com/' 'Sass homepage">Sass homepage</a></li>
<li><a href="" title="http://www.lesscss.org/' 'LESS CSS homepage">LESS homepage</a></li>
<li><a href="" title="http://blog.danielfischer.com/2011/04/18/quickstart-guide-to-using-compass-haml-sass-scss-with-rails-3/' 'Quickstart guide to Sass">Quickstart guide to Sass</a></li>
</ul>


<p>Feel free to leave a comment with your thoughts on Sass. I hope you&#8217;ve enjoyed this one!</p>
]]></content>
  </entry>
  
</feed>
