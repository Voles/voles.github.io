<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Niels Dequeker]]></title>
  <link href="http://voles.github.io/atom.xml" rel="self"/>
  <link href="http://voles.github.io/"/>
  <updated>2015-07-09T16:13:54+02:00</updated>
  <id>http://voles.github.io/</id>
  <author>
    <name><![CDATA[Niels Dequeker]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Exploring ECMAScript 6]]></title>
    <link href="http://voles.github.io/blog/2015/07/08/exploring-es6/"/>
    <updated>2015-07-08T19:44:05+02:00</updated>
    <id>http://voles.github.io/blog/2015/07/08/exploring-es6</id>
    <content type="html"><![CDATA[<p>On July 2nd, ECMA published a press release <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">announcing ECMAScript&reg; 2015</a>. I’ve been experimenting with some of the new features of the language.</p>

<p>Because most of the new features aren&rsquo;t supported by all browsers, the ES6 code must be transpiled to ES5 compatible code. There are a couple of tools out there which can do the job.</p>

<p><strong>My setup consists of:</strong></p>

<ul>
<li><a href="https://github.com/google/traceur-compiler">Traceur</a> &mdash; to compile the ES6 code to ES5 code</li>
<li><a href="http://gulpjs.com/">Gulp</a> &mdash; to run the webserver and trigger the compile task</li>
</ul>


<p>The <a href="https://github.com/Voles/es6-traceur-gulp">repository on GitHub</a> contains all source code, including documentation.</p>

<p>I&rsquo;ll describe some of the new features I&rsquo;ve tried and think are worth sharing.</p>

<h2>New String features</h2>

<h3>Methods</h3>

<p>New methods like <code>startsWith()</code> and <code>includes()</code> feel much more natural to work with strings.
They are  more readable than doing the same checks using <code>indexOf()</code> in ES5.</p>

<p>Note that these methods are case sensitive, as <a href="https://github.com/Voles/es6-traceur-gulp/blob/master/app/main.js#L12">I found out while experimenting</a>.</p>

<h3>Multiline strings</h3>

<p>It is now possible to use multiline strings, without having to concatenate each line.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">`</span><span class="nx">This</span> <span class="nx">is</span>
</span><span class='line'><span class="nx">valid</span> <span class="nx">ES2015</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>String interpolation</h3>

<p>Instead of concatenating strings and variables, code can now be more readable using string interpolation. Note that the backticks are required here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">theAnswer</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="err">`</span><span class="nx">The</span> <span class="nx">answer</span> <span class="nx">is</span> <span class="nx">$</span><span class="p">{</span><span class="nx">theAnswer</span><span class="p">}</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functions</h2>

<h3>Named parameters</h3>

<p>Functions can take named parameters using ES6, which can have default values.
When you execute the <code>doGreeting()</code> function below without passing a value, it’s default output will be <code>Hi!</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">doGreeting</span><span class="p">(</span><span class="nx">greeting</span> <span class="o">=</span> <span class="err">‘</span><span class="nx">Hi</span><span class="o">!</span><span class="err">’</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">greeting</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Arrow functions</h3>

<p>This is basically a new syntax to write functions, with a <a href="https://leanpub.com/understandinges6/read/#leanpub-auto-arrow-functions">few differences</a>. The example code below defines the function <code>sayIt()</code>, which takes one parameter, <code>it</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">sayIt</span> <span class="o">=</span> <span class="nx">it</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">it</span><span class="p">);</span>
</span><span class='line'><span class="nx">sayIt</span><span class="p">(</span><span class="s1">&#39;Yo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generators</h3>

<p>I’ve worked with Python before, where terms as list comprehension and generators are commonly used.
Good news, generators are now part of ECMAScript 6!</p>

<p>A simple example is the generator <code>alphabetGenerator()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="o">*</span><span class="nx">alphabetGenerator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s1">&#39;A&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s1">&#39;B&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">yield</span> <span class="s1">&#39;C&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A working example can be found on line 53 of my <a href="https://github.com/Voles/es6-traceur-gulp/blob/master/app/main.js#L53">ES6 experiments</a>.</p>

<h2>Deploying ES6 code</h2>

<p>The code generated by Traceur depends on a small runtime library containing Javascript code for things like creating classes, handling spread arguments, etc.</p>

<p>There is not yet a &lsquo;One Size Fits All&rsquo; solution to compile all code during the build process.
Dr. Axel Rauschmayer has written a great overview on <a href="http://www.2ality.com/2015/04/deploying-es6.html">how to deploy ECMAScript 6 code</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firefox OS: An Introduction]]></title>
    <link href="http://voles.github.io/blog/2013/08/05/firefox-os-an-introduction/"/>
    <updated>2013-08-05T22:47:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/08/05/firefox-os-an-introduction</id>
    <content type="html"><![CDATA[<p>Today I was invited by <a href="https://twitter.com/remcoder">Remco</a> to join the <a href="https://plus.google.com/u/0/events/ctdip0rot71j36rrkkl4rkto1p0">Firefox OS event</a> at the <a href="http://q42.com/">Q42</a> office in Amsterdam. It was a great evening. With this blogpost, I’d like to share some of the things I’ve learned.</p>

<p><img src="http://voles.github.io/images/posts/meetup-firefox-os.JPG"></p>

<h1>Discussed topics</h1>

<p>Speakers <a href="https://twitter.com/alispivak">Ali Spivak</a> (projectmanager for the Mozilla Developer Network), <a href="https://twitter.com/sergimansilla">Sergi Mansilla</a> and <a href="https://twitter.com/janjongboom">Jan Jongeboom</a> (who make software for Firefox OS) gave presentations about Firefox OS, a community-based system for mobile devices.</p>

<p>Besides a general introduction, the two main topics discussed were:</p>

<ul>
<li><em>“What is Firefox OS and who is it targeting?”</em></li>
<li><em>“Why should we / our clients put it on our horizon?”</em></li>
</ul>


<h1>Who is it for?</h1>

<p><a href="http://www.mozilla.org/en-US/firefox/os/">Firefox OS</a> is designed for alternative markets. It wants to replace the current feature phones, and give access to smartphones to people who otherwise could not afford it.</p>

<p>A good question was <em>“If you target alternative markets, why don’t you sell the phone in Africa?”</em>.</p>

<p>The answer is that the distribution market is the responsibility of the carriers. They choose where they sell the phone. The phone was recently released in Poland and Hungary.</p>

<h1>Performance</h1>

<p>Most people were actually very curious about the performance, compared to high-end Android devices and the iPhone.</p>

<p>Current low-end devices running Android don’t perform very well at all. Especially if you’re used to work with for example, the iPhone. This is because Android wasn&rsquo;t made to run on these devices.</p>

<p>Because Firefox OS targets these low-end devices, and it is faster than Android, the experience when using Firefox OS is noticeably better.</p>

<p>They brought some devices so we could play around with the OS and see for ourselves. In general, the attendees were quite suprised about how good Firefox OS runs!</p>

<p><img src="http://voles.github.io/images/posts/meetup-firefox-os-testing.JPG"></p>

<h1>Standards</h1>

<p>The people behind Mozilla also want to push the usage of standards. This was on one of the slides during the presentation:</p>

<blockquote><p>“Firefox OS application = website + W3C proposed phone APIs”</p></blockquote>


<p>That’s great!</p>

<p>The most basic application can actually consist of a single HTML-file. You can style the application with CSS and add extra functionality with JavaScript. They also showed how you can access phone sensors via JavaScript.</p>

<h1>Sensor events</h1>

<p><code>Deviceproximity</code> is an event that allows you to know when something is getting closer or further away from the phone.
An example usecase for this would be to brighten up the screen when a user gets close enough to the phone.</p>

<p><code>Devicelight</code> is an event that gives you access to the amount of light in the room. For example, you can adjust the colors of you paragraphs when it is getting lighter / darker outside.</p>

<p>These are all basic examples, but I’m looking forward to see what others will do with them. The cool thing is that you listen to these events using pure JavaScript!</p>

<h1>Conclusion</h1>

<p>It was nice to get such an extensive introduction to Firefox OS from the masters themselves. There was a lot of Q&amp;A in between, where the thoughts behind the OS were explained very well.</p>

<p>Note: take a look at this slide at the Q42 office!</p>

<p><img src="http://voles.github.io/images/posts/meetup-firefox-os-slide.JPG"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The First JavaScript MVC Meetup]]></title>
    <link href="http://voles.github.io/blog/2013/06/09/the-first-javascript-mvc-meetup/"/>
    <updated>2013-06-09T17:08:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/06/09/the-first-javascript-mvc-meetup</id>
    <content type="html"><![CDATA[<p>On May 22 we have organized the first JS MVC Meetup in Amsterdam. With this post I&rsquo;d like to share why we have setup the Meetup, together with some pictures.</p>

<h3>Why organizing a JS MVC specific Meetup</h3>

<p>Last year I&rsquo;ve defined the technology stack for <a href="http://social-express.com/">SocialExpress</a>. I found it very hard to choose the right framework for our client application.</p>

<p>At the end I decided to go for AngularJS because of two reasons:</p>

<ol>
<li>I had previous experience with AngularJS, which saves time learning something new</li>
<li>it is powered by Google, which adds quite some credibility</li>
</ol>


<p>It was only after talking with <a href="https://twitter.com/tdhulster">Thijs</a> and <a href="http://www.bagu.org/blog/">Ben</a> that I noticed other people also experience the same problem of choosing the right framework for the right purpose.
We knew that there already are quite some JS specific Meetups in Amsterdam, but none of them  focus towards MVC frameworks.</p>

<p>On the first Meetup, we had about 15 people who attended. The talks were about <a href="http://emberjs.com/">EmberJS</a>, <a href="http://angularjs.org/">AngularJS</a> and <a href="http://smacss.com/">SMACSS</a>.</p>

<h3>1. Introduction to Ember and Ember Data</h3>

<p><em>Ben Konrath</em></p>

<p>During his talk Ben introduced some of the key concepts and features in Ember and Ember Data. He shared his experience using these technologies in a large project with an eye towards providing an objective view of the pros and cons of the Ember stack.</p>

<h3>2. SMACSS</h3>

<p><em>Prashant Palikhe</em></p>

<p>Prashant gave a lightning talk on SMACSS, guidelines for scalable &amp; modular CSS architecture that he had used recently in one of his projects.
He shared his learnings with all of us.</p>

<h3>3. Setting up an AngularJS project with Yeoman</h3>

<p><em>Niels Dequeker &amp; Thijs d'Hulster</em></p>

<p>We talked about using Yeoman to quickly setup an AngularJS project. We discussed Yeoman as a workflow, in combination with Grunt and Bower.
On the basis of a demo application, we talked about some of the core concepts of AngularJS, including directives, scopes, etc.</p>

<h2>Some pictures</h2>

<h4>The location</h4>

<p><img src="http://voles.github.io/images/posts/meetup-location.jpeg" title="'JS MVC Meetup location'" ></p>

<h4>Ben talking about EmberJS</h4>

<p><img src="http://voles.github.io/images/posts/meetup-ben.jpeg" title="'JS MVC Meetup Ben about EmberJS'" ></p>

<h4>Prashant talking about SMACSS</h4>

<p><img src="http://voles.github.io/images/posts/meetup-prashant.jpeg" title="'JS MVC Meetup Prashant about SMACSS'" ></p>

<h4>Thijs and me talking about AngularJS</h4>

<p><img src="http://voles.github.io/images/posts/meetup-thijs-and-niels.jpeg" title="'JS MVC Meetup Niels and Thijs about AngularJS'" ></p>

<h4>Short break</h4>

<p><img src="http://voles.github.io/images/posts/meetup-break.jpeg" title="'JS MVC Meetup short break'" ></p>

<h2>Room for improvement</h2>

<ul>
<li>Don&rsquo;t change the date once the Meetup is announced, it gives too much confusion</li>
<li>Do more promotion. Talk about our Meetup at other Meetups, flyer, invite friends… This time the only promotion we had was via Meetup.</li>
</ul>


<h2>Final thoughts</h2>

<p>I really enjoyed the evening and it was great to talk with like minded people. During the break I heard about how others projects are organized and which technologies they use for &lsquo;bigger&rsquo; client applications.</p>

<h2>Next Meetup</h2>

<p>The next Meetup is scheduled at June 26. For future Meetups, you can find more information on our <a href="http://www.meetup.com/JavaScript-MVC-Meetup-Amsterdam/">JavaScript MVC Meetup page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Favourite Mac Utilities]]></title>
    <link href="http://voles.github.io/blog/2013/04/25/favourite-mac-utilities/"/>
    <updated>2013-04-25T16:28:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/04/25/favourite-mac-utilities</id>
    <content type="html"><![CDATA[<p>When you spend a lot of time in front of your computer, it is important to optimize your workflow. Below are some tools that enhance my daily workflow.</p>

<h2><a href="http://mizage.com/divvy/" title="Divvy, window management at its finest">Divvy</a></h2>

<p>Divvy is a utility to quickly resize and position your windows. My configuration is as follows:</p>

<ul>
<li><code>&#x2325; + &uarr;</code> make the current active window fullscreen</li>
<li><code>&#x2325; + &darr;</code> make the current acitve window center in the middle, with half the size of the window</li>
<li><code>&#x2325; + &larr;</code> make the current active window take in the left side of the screen</li>
<li><code>&#x2325; + &rarr;</code> make the current active window take in the right side of the screen</li>
</ul>


<p><img src="http://voles.github.io/images/posts/divvy.png" title="'Divvy screenshot'" ></p>

<h2><a href="http://stereopsis.com/flux/" title="f.lux">Flux</a></h2>

<p>f.lux makes your computer screen look like the room you&rsquo;re in, all the time. When the sun sets, it makes your computer look like your indoor lights. In the morning, it makes things look like sunlight again.</p>

<p><img src="http://voles.github.io/images/posts/flux.png" title="'Flux screenshot'" ></p>

<h2><a href="http://www.alfredapp.com/" title="Alfred App">Alfred</a></h2>

<p>Alfred is a productivity application for Mac OS X, which aims to save you time in searching your local computer and the web. You can best compare it with the Mac Spotlight on steroids.</p>

<p><img src="http://voles.github.io/images/posts/alfred.png" title="'Alfred screenshot'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Python]]></title>
    <link href="http://voles.github.io/blog/2013/04/20/getting-started-with-python/"/>
    <updated>2013-04-20T15:59:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/04/20/getting-started-with-python</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while now since I&rsquo;ve written my first line of Python code. With this blogpost I&rsquo;d like to share some knowledge, to make it easier for others to get started with Python. I assume you have some basic experience with the command line, and know what unittests are for.</p>

<p>Note: the commands below are written for Mac OSX</p>

<h2>Different versions of Python</h2>

<p>There are two main versions of Python which are both still frequently used. The most recent version is Python 3, and there is also the older 2.7 version.</p>

<blockquote><p>Python 2.x is the status quo, Python 3.x is the present and future of the language</p>

<p><cite><a href="http://wiki.python.org/moin/Python2orPython3" title="Python2orPython3">Python Wiki</a></cite></p></blockquote>

<p>On the Python Wiki you can find more information about <a href="http://wiki.python.org/moin/Python2orPython3," title="Which Python version to use">which Python version to use</a>.</p>

<h2>Environment setup</h2>

<p>It is common to setup a new environment when you start with a new Python project. The reason for this is that different projects will have different dependencies on other libraries.</p>

<p>You can install all of the dependencies globally, although thats not recommended. Once you switch to an other machine, or if you work in team, you have to make sure all the right version of each external library is installed.</p>

<p>Let&rsquo;s get started. First of all we install the right tools to set up an environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pip install virtualenv
</span></code></pre></td></tr></table></div></figure>


<p>Next we create a new environment named &lsquo;my-environment&rsquo;, using the command <code>virtualenv</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/Documents/environments/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Documents/environments/
</span><span class='line'><span class="nv">$ </span>virtualenv my-environment --no-site-packages
</span></code></pre></td></tr></table></div></figure>


<p>Now we can create a link to it, so we don&rsquo;t have to type the full path everytime we want to use the environment.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ln -s ~/Documents/environments/my-environment/bin/python /usr/bin/my-environment
</span></code></pre></td></tr></table></div></figure>


<p>When you execute <code>$ my-environment</code>, you can immediately start writing code. Let&rsquo;s print something to the Terminal with <code>print "Hello, World!"</code>. When you write <code>2 + 3</code>, you will get <code>5</code> as a result.</p>

<p>That&rsquo;s it, you just evaluated your first two expressions in Python. Now we have our own Python environment where we can install and update all of the dependencies.</p>

<p>Writing your code directly in the Terminal is of course not recommended when you want to write serious programs.
Let&rsquo;s make a project for this environment.</p>

<h2>Project setup</h2>

<p>Go to the project folder and create a file named <code>math.py</code> with the following content.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">[2013] Niels Dequeker</span>
</span><span class='line'><span class="sd"> All Rights Reserved.</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Math</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">times</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">divide</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">a</span> <span class="o">/</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how we write a basic class in Python. It has three methods, <code>sum</code>, <code>times</code> and <code>divide</code>.</p>

<p>Now we can write some unittests to validate our code. Create a file named <code>tests.py</code> with the following content.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="sd">[2012] SocialExpress</span>
</span><span class='line'><span class="sd"> All Rights Reserved.</span>
</span><span class='line'><span class="sd">&#39;&#39;&#39;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">Math</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_sum</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">math</span> <span class="o">=</span> <span class="n">Math</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&#39;Incorrect sum&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_times</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">math</span> <span class="o">=</span> <span class="n">Math</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">times</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span><span class="p">,</span> <span class="s">&#39;Incorrect times&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">test_divide</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">math</span> <span class="o">=</span> <span class="n">Math</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">divide</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;Incorrect division&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through the code step by step.</p>

<p>First of all we import our dependencies. <code>Math</code> is our own class that we&rsquo;ve created before.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">unittest</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">Math</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next is the class definition for the test. It extends from <code>unittest.TestCase</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now what follows are the methods. Each one is testing one functionality of our <code>Math</code> class. We check the return values with <code>assertTrue</code> and get an exception when these aren&rsquo;t what we expected.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_sum</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">math</span> <span class="o">=</span> <span class="n">Math</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertTrue</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="o">==</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&#39;Incorrect sum&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, we define that if the <code>tests.py</code> file is executed directly, it has to execute our tests.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. We can run our code in the Terminal with <code>$ my-environment tests.py</code>. You should see <code>Ran 3 tests</code>, which mean your code works as expected.</p>

<h2>Further reference</h2>

<ul>
<li><a href="http://www.codecademy.com/courses/getting-started-with-python," title="Getting Started with Python on Codeacademy">Getting Started with Python on Codeacademy</a></li>
<li><a href="http://docs.python.org/2/tutorial/," title="The Python tutorial">The Python tutorial</a></li>
<li><a href="www.python.com" title="Python homepage">Python homepage</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Steps Into Functional Programming]]></title>
    <link href="http://voles.github.io/blog/2013/04/14/functional-programming/"/>
    <updated>2013-04-14T21:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2013/04/14/functional-programming</id>
    <content type="html"><![CDATA[<p>At the end of last year, I’ve been introduced to Functional Programming (FP) by a former collegue.
He told me that it forces you to think in a different way, when writing code. Curious as I was, I decided to take the <a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Functional Programming course</a> on Coursera, to learn more about it.</p>

<p>The teacher is <a href="http://en.wikipedia.org/wiki/Martin_Odersky," title="Martin Odersky">Martin Odersky</a> (designer of the Scala programming language), who gives several video lectures every week.
What takes most of my time are the weekly assignments. Usually I solve the problems with pen and paper, and write the actual code afterwards.</p>

<h3>What is Functional Programming</h3>

<p>There are three main programming paradigms. A paradigm describes distinct concepts or thought patterns in some scientific discipline. I&rsquo;ll briefly describe two of them below.</p>

<h4>Imperative programming</h4>

<p>You probably know imperative programming from languages such as PHP, Python, Java…<br/>
These are about:</p>

<ul>
<li>modifying mutable variables</li>
<li>using assignments</li>
<li>control structures such as if-then-else, loops, break, continue, return</li>
</ul>


<h4>Functional programming</h4>

<p>In a restricted sense, functional programming means programming without mutable variables, assignments, loops and other imperative control structures.</p>

<p>In a wider sense, functional programmingmeans focusing on the functions. Functions can be values that are produced, consumed, and composed. All this becomes easier in a functional language.</p>

<h3>FP concepts in Python</h3>

<p>As a web developer, I’ve spend a lot of time working with PHP, JavaScript etc.
But ever since I’ve started to work with Python, I’ve got in touch with <a href="http://docs.python.org/2/tutorial/datastructures.html#list-comprehensions" title="Python list comprehension">list comprehension</a>, generators and iterators. These are all concepts of Functional Programming.</p>

<p>It provides new ways to work with data, which results in more elegant and compact code, which in turn is better readable.</p>

<h3>Personal experience</h3>

<p>With what I&rsquo;ve learned, I found out that I could apply these FP concepts throughout most of my code. Still four weeks to go on the course, but the more I learn about it, the more it fascinates me.</p>

<p>Learning Functional Programming really feels like a great step forward to me.</p>

<h3>Further reference</h3>

<ul>
<li><p><a href="https://www.coursera.org/course/progfun" title="Functional Programming on Coursera">Progfun</a><br/>
The Functional Programming course on Coursera</p></li>
<li><p><a href="http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf" title="Why Functional Programming Matters">Why Functional Programming Matters</a><br/>
A paper by John Hughes from 1984</p></li>
<li><p><a href="http://learnyouahaskell.com/chapters%20'Learn%20Haskell">Learn Haskell</a><br/>
Great introduction into Haskell, a functional programming language</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drag &amp; Drop With AIR]]></title>
    <link href="http://voles.github.io/blog/2011/10/18/drag-and-drop-with-air/"/>
    <updated>2011-10-18T10:52:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/10/18/drag-and-drop-with-air</id>
    <content type="html"><![CDATA[<p>This is a small blogpost on how to implement drag and drop functionality in an AIR-application. It can be used to make an application much more easier to work with.</p>

<p>At first, you have to add two event listeners to the component, <code>NATIVE_DRAG_ENTER</code> and <code>NATIVE_DRAG_DROP</code>. Both of them are <code>NativeDragEvents</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">addEventListener</span><span class="o">(</span><span class="n">NativeDragEvents</span><span class="o">.</span> <span class="n">NATIVE_DRAG_ENTER</span><span class="o">,</span> <span class="n">nativedragenterHandler</span><span class="o">);</span>
</span><span class='line'><span class="n">addEventListener</span><span class="o">(</span><span class="n">NativeDragEvents</span><span class="o">.</span> <span class="n">NATIVE_DRAG_DROP</span><span class="o">,</span> <span class="n">nativedragdropHandler</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>nativedragenterHandler</code> will be triggered whenever a user hovers the component with one or more files selected. The <code>nativedragdropHandler</code> will be triggered when the user ‘drops’ his files on this component.</p>

<p>Put this code in the <code>nativedragenterHandler</code>, to let the component accept a user to drop his files here.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="n">DragManager</span><span class="o">.</span><span class="na">acceptDragDrop</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything else happens in the <code>nativedragdropHandler</code>. The code below shows you how to fetch the dropped files, so you can work with them in the application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="kd">var</span> <span class="n">droppedFiles</span><span class="p">:</span><span class="kt">Array</span> <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="na">clipboard</span><span class="o">.</span><span class="na">getData</span><span class="o">(</span><span class="n">ClipboardFormats</span><span class="o">.</span><span class="na">FILE_LIST_FORMAT</span><span class="o">)</span> <span class="k">as</span> <span class="n">Array</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up a AS3 Project With Flash Builder]]></title>
    <link href="http://voles.github.io/blog/2011/07/14/setting-up-a-as3-project-with-flash-builder/"/>
    <updated>2011-07-14T20:03:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/07/14/setting-up-a-as3-project-with-flash-builder</id>
    <content type="html"><![CDATA[<h2>Basic setup</h2>

<p>First we have to create a new project in <strong>Flash Builder</strong>, go to <em>File</em> <strong>→</strong> <em>New</em> <strong>→</strong> <em>ActionScript Project</em>.</p>

<p>You will see a dialog where you can fill in your project details. Fill in your <em>Project name</em> and press the <em>Next</em> button.</p>

<p><img src="http://voles.github.io/images/posts/project-name.png" title="'Project name'" ></p>

<p>Change the <em>Main application file</em> to <em>Main.as</em>, this is just a convention. Press finish to complete your project setup.</p>

<p><img src="http://voles.github.io/images/posts/main-application-file.png" title="'Main application file'" ></p>

<h2>Flash Library</h2>

<p>Now, the only thing we have is an empty AS3-project. We can use Flash Builder to write our classes etc., but most projects will need some graphics. Thats where the Flash IDE comes in.</p>

<p>Make a new .fla-file and make a MovieClip with a very basic drawing in it. Go to the properties of the MovieClip.</p>

<p>Tick <em>Export for ActionScript</em> and change the classname (‘Class’) to &lsquo;SimpleShape’. You schould have something like this:</p>

<p><img src="http://voles.github.io/images/posts/mc-properties.png" title="'MovieClip properties'" ></p>

<p>Because we want to use the library of this .fla-file with Flash Builder, we have to make a .swc-file. You can learn more about .swc-files in this <a href="http://stackoverflow.com/questions/1340866/what-is-a-flash-swc-file-and-how-is-it-used" title="Stackoverflow question, what is swc and how is it used">Stackoverflow question</a>.</p>

<p>To let your .fla-file generate a .swc-file, go to <em>File</em> <strong>→</strong> <em>Publish Settings</em>. Next, go to the <em>Flash</em>-tab and thick <em>Export SWC</em>.</p>

<p><img src="http://voles.github.io/images/posts/publish-settings.png" title="'Publish settings'" ></p>

<p>Press the <em>OK</em>-button. Every time you change something in your .swf-file, you will have to publish your .swc-file again to make sure it contains the latest updates of your library. You can generate a .swc-file with the shortcut <em>command + return</em>.</p>

<h2>Link the SWC to your Flash Builder project</h2>

<p>Go back to Flash Builder and make a new folder named ‘libs’ in your project. Here you can put all your resources for the project. The structure of your project should look like this:</p>

<p><img src="http://voles.github.io/images/posts/project-structure.png" title="'Project structure'" ></p>

<p>Go back to the Flash IDE and save your .fla-file in the folder <em>libs</em> you have just created in your Flash Builder project. The location of your project depends on your workspace in Flash Builder.</p>

<p>Save the .fla-file as <em>library.fla</em> and again create a .swc-file (<em>command + return</em>). Go back to Flash Builder and your project structure now should look like this:</p>

<p><img src="http://voles.github.io/images/posts/libs-folder.png" title="'Libs folder'" ></p>

<p>Now we must let the project know that he can use the .swc-files in the <em>libs</em>-folder. Right-click on the name of the project, go to <em>Properties</em>. Go to the <em>ActionScript Build Path</em>-tab and then to the <em>Library path</em>-view. Click <em>Add SWC Folder</em> and select your <em>libs</em>-folder. You should see this:</p>

<p><img src="http://voles.github.io/images/posts/build-path.png" title="'Actionscript build path'" ></p>

<p>Now your .swc-file is linked with your Flash Builder project, click <em>Ok</em>.</p>

<h2>Preloader</h2>

<p>We have a very small .swc-file, with only one MovieClip. But when you have lots and lots of graphics, MovieClips and sound, your .swc-file will soon become bigger. When your .swf-file is loading all these data, we want to give the user some feedback. We can do this by making a preloader.</p>

<p>In the constructor of your Main.as, add these lines of code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// stage</span>
</span><span class='line'><span class="n">stage</span><span class="o">.</span><span class="na">scaleMode</span> <span class="o">=</span> <span class="n">StageScaleMode</span><span class="o">.</span><span class="na">NO_SCALE</span><span class="o">;</span>
</span><span class='line'><span class="n">stage</span><span class="o">.</span><span class="na">align</span> <span class="o">=</span> <span class="n">StageAlign</span><span class="o">.</span><span class="na">TOP_LEFT</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">loaderInfo</span><span class="o">.</span><span class="na">bytesLoaded</span> <span class="o">&gt;</span> <span class="n">loaderInfo</span><span class="o">.</span><span class="na">bytesTotal</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// swf is already loaded</span>
</span><span class='line'>  <span class="n">preloaderCompleteHandler</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="c1">// preloader methods</span>
</span><span class='line'>  <span class="n">loaderInfo</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">Event</span><span class="o">.</span><span class="na">COMPLETE</span><span class="o">,</span> <span class="n">preloaderCompleteHandler</span><span class="o">);</span>
</span><span class='line'>  <span class="n">loaderInfo</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="n">ProgressEvent</span><span class="o">.</span><span class="na">PROGRESS</span><span class="o">,</span> <span class="n">preloaderProgressHandler</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We look at the loaderInfo of the SWF tho check if all data is loaded. If not, we add two eventlisteners to the loaderInfo. Next, add these functions to the Main-class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Preloader progress</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">preloaderProgressHandler</span><span class="o">(</span><span class="n">event</span><span class="o">:</span><span class="kt">ProgressEvent</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="nf">trace</span><span class="o">(</span><span class="s2">&quot;Preloader progress: &quot;</span> <span class="o">+</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">((</span><span class="n">event</span><span class="o">.</span><span class="na">bytesLoaded</span> <span class="o">/</span> <span class="n">event</span><span class="o">.</span><span class="na">bytesTotal</span><span class="o">)</span> <span class="o">*</span> <span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s2">&quot;%&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Preloader complete</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">function </span><span class="nf">preloaderCompleteHandler</span><span class="o">(</span><span class="n">event</span><span class="o">:</span><span class="kt">Event</span><span class="o">):</span><span class="kt">void</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The progress-function contains some simple math to trace the progress of the preloader. You can also use this value so visualise the progress.</p>

<p>Now we have to write the preloaderCompleteHandler, but first a little more info about preloaders and Flash.</p>

<p>When the SWF is loading, it will not play until every classe you have used on the first frame is loaded. So we will add a second frame to the Flash Builder project, where you can use as much classes as you want. On the first frame, we will use as little classes as possible.</p>

<p>This way, the SWF will show the first frame (where we will show a preloader), and when everything is loaded, we jump to the second frame.</p>

<p>To make this work, we first have to make a second class, I name it ‘Application.as’ and put it in a package named ‘be.devine’.</p>

<p>Again, right click on your Flash Builder project and go to ‘Properties’. In the ‘ActionScript Compiler’-tab, put this in the ‘Additional compiler arguments’: “-frame &ldquo;start&rdquo; be.devine.Application”. This creates a second frame for your project. You should have this:</p>

<p><img src="http://voles.github.io/images/posts/compiler-arguments.png" title="'Additional compiler arguments'" ></p>

<p>Go to your Main.as class and change the superclass to ‘MovieClip’ instead of Sprite. You have to do this because we want multiple frames (one frame for the preloader and a second frame for the application itself) and a Sprite doesn’t have a timeline.</p>

<p>The last thing we have to write is the preloaderCompleteHandler. Add these lines to the function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='as3'><span class='line'><span class="c1">// go to second frame</span>
</span><span class='line'><span class="n">gotoAndStop</span><span class="o">(</span><span class="s2">&quot;start&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// application classname</span>
</span><span class='line'><span class="n">var</span> <span class="n">applicationClass</span><span class="o">:*</span> <span class="o">=</span> <span class="n">getDefinitionByName</span><span class="o">(</span><span class="s2">&quot;be.devine.Application&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// make the application</span>
</span><span class='line'><span class="n">var</span> <span class="n">application</span><span class="o">:*</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">applicationClass</span><span class="o">();</span>
</span><span class='line'><span class="n">addChild</span><span class="o">(</span><span class="n">application</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You see I’ve used the asterisk, this is used like a ‘joker’. So the ‘application’ variable can be any class, but is doesn’t make a explicit reference to the Application-class. This makes sure the that the SWF will not wait until the Application-class is loaded before showing up the preloader.</p>

<h2>Testing the preloader</h2>

<p>To make sure the preloader is working properly, I’ve added a big image (3.8 MB) in the Application-class.</p>

<p>When you debug the project, you will see a lot of traces with the current status of te preloader, when the application is loaded, the Application-class will trace “Hello World”.</p>

<h2>Source files</h2>

<p>You can download <a href="http://voles.github.io/downloads/MyFirstActionscriptProject.zip">the example project</a> and play around with it.</p>

<p>I hope you learned something from this. Please, do not hesitate to comment with your opinion, doubts, feedback&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sass for Terminal Dummies]]></title>
    <link href="http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies/"/>
    <updated>2011-05-11T20:57:00+02:00</updated>
    <id>http://voles.github.io/blog/2011/05/11/sass-for-terminal-dummies</id>
    <content type="html"><![CDATA[<p>A while ago, there were some posts on <a href="http://www.forrst.com" title="Forrst">Forrst</a> about LESS. <a href="http://www.lesscss.org/" title="Less">LESS</a> is a tool, made to add extra functionality to CSS. Until now I only wrote <em>static</em> CSS-files, sometimes with over 1500 lines of code for a simple website. To make the stylesheet more readable, I grouped codeblocks, used comments, added extra indent with tabs, etc.</p>

<p>Splitting up the stylesheet in separate files is also an option to keep everything structured, but that adds a lot of extra HTTP-request.</p>

<p>Recently, one of our teachers told us about <a href="http://sass-lang.com/" title="Sass">Syntactically Awesome Stylesheets (Sass)</a>. It is more or less the same as LESS, the main difference is that LESS uses the CSS syntax and Sass uses its own syntax. But it’s possible to use CSS-syntax with <a href="http://sass-lang.com/docs/yardoc/file.SCSS_FOR_SASS_USERS.html" title="Scss">SCSS</a>.</p>

<p>I was (and still am) very excited about it, and I&rsquo;d like to share both my experience and knowledge with the rest of the world.</p>

<h3>What is Sass?</h3>

<blockquote><p>Sass makes CSS fun again. Sass is an extension of CSS3, adding <a href="http://sass-lang.com/#nesting" title="Sass nesting">nested rules</a>, <a href="http://sass-lang.com/#variables" title="variables">variables</a>, <a href="http://sass-lang.com/#mixins" title="Sass mixins">mixins</a>, <a href="http://sass-lang.com/#extend" title="selector inheritance">selector inheritance</a>, <a href="http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html" title="More information about Sass">and more</a>. It’s translated to well-formatted, standard CSS using the command line tool or a web-framework plugin.</p>

<p><cite><a href="http://www.sass-lang.com" title="Sass homepage">sass-lang.com</a></cite></p></blockquote>

<h3>Compass</h3>

<p>One of the disadvantages of pure CSS was that if you import other CSS-files, you create extra HTTP-requests. Compass is a framework that makes it possible to compile all your imported CSS-files into one CSS-file.</p>

<p>I think there is no reasen why you wouldn’t use Compass if you work with Sass.</p>

<h3>Using Sass</h3>

<p>To use Sass first create two new folders <code>css</code> and <code>sass</code>. In the same directory, create a file named <code>config.rb</code>. Add these lines to the file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">css_dir</span> <span class="o">=</span> <span class="s2">&quot;css&quot;</span>
</span><span class='line'><span class="n">sass_dir</span> <span class="o">=</span> <span class="s2">&quot;sass&quot;</span>
</span><span class='line'><span class="n">output_style</span> <span class="o">=</span> <span class="ss">:compressed</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line refers to the directory were your final CSS-file will be compiled to. The second line tells where your .scss-files are stored.</p>

<p>The last line tells the compiler to compress the final CSS-file, so you will save some bandwith (which is important for mobile-applications).</p>

<p>Now make a file named <code>screen.scss</code> in the directory <code>sass/</code>. Here you can write CSS-code like you did before.</p>

<p>Now we first have to install Sass and Compass. Type these two commands in the Terminal, to install both Ruby Gems.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo gem install haml
</span><span class='line'>$ sudo gem install compass</span></code></pre></td></tr></table></div></figure>


<p>To compile the file, we&rsquo;ll use Terminal. Go to the folder <code>sass</code> we have just created. To change the current directory, type the command <code>cd</code> and then   the path you want to go to. E.g. <code>cd /Applications/MAMP/htdocs/my-first-sass-project</code>.</p>

<p>Next, we have to compile the <code>screen.scss-file</code>. We will compile the file using Compass. Use the commando <code>compass compile sass/screen.scss</code> to compile your scss-file.</p>

<p>Now look at your <code>css-folder</code>. There should be a file named <code>screen.css</code>, with your previously written CSS-code, compressed.</p>

<p>That’s it. If you don’t want to manually compile the .scss-file after you saved it, you can use the commando ‘watch’. Use <code>compass watch sass/screen.scss</code> to automatically compile your sass-file when you make some changes (and save the file).</p>

<p>Sass offers some great build-in functions for <a href="http://nex-3.com/posts/89-powerful-color-manipulation-with-sass" title="color-manipulations">color manipulations</a>, be sure to check it out if you want to learn more about it.</p>

<h3>Sass functions</h3>

<p><strong>Variables</strong><br/>
You can declare variables and use them everywhere in your .scss-file. This can come in handy when you wan to use the same colors over and over again for e.g. headings, links, menu&hellip;</p>

<p><strong>Nesting</strong><br/>
You can write much cleaner CSS-code with nesting.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span><span class="nc">.message</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">li</span><span class="o">.</span><span class="n">warning</span> <span class="err">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">yellow</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.error</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">red</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">li</span><span class="nc">.success</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="nb">green</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Mixins</strong><br/>
Mixins are like functions. You can pass some parameters and it gives you the result you want.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@makebox</span> <span class="o">(</span><span class="err">$</span><span class="nt">background</span><span class="o">,</span> <span class="err">$</span><span class="nt">border</span><span class="o">,</span> <span class="err">$</span><span class="nt">width</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">background</span><span class="o">:</span> <span class="err">$</span><span class="nt">background</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">border</span><span class="o">:</span> <span class="nt">1px</span> <span class="nt">solid</span> <span class="err">$</span><span class="nt">border</span><span class="o">;</span>
</span><span class='line'>  <span class="nt">width</span><span class="o">:</span> <span class="err">$</span><span class="nt">width</span><span class="o">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nf">#boxA</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="n">makebox</span><span class="p">(</span><span class="m">#FF0000</span><span class="o">,</span> <span class="m">#000000</span><span class="o">,</span> <span class="m">150</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#boxB</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="n">makebox</span><span class="p">(</span><span class="m">#00FF00</span><span class="o">,</span> <span class="m">#CCCCCC</span><span class="o">,</span> <span class="m">375</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Inheritance</strong><br/>
It is possible to extend selectors from other selectors.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.blue</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">background</span><span class="o">:</span> <span class="m">#0000FF</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">:</span> <span class="m">10px</span> <span class="k">dashed</span> <span class="m">#0000FF</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nf">#box</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="nb">blue</span><span class="p">;</span>
</span><span class='line'>  <span class="k">width</span><span class="o">:</span> <span class="m">160px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you like what you see, be sure to take a look at these resources to learn Sass. The most complicated part is installing / compiling the files. Most other things speak for themselves.</p>

<h3>Further reference</h3>

<ul>
<li><a href="" title="http://sass-lang.com/' 'Sass homepage">Sass homepage</a></li>
<li><a href="" title="http://www.lesscss.org/' 'LESS CSS homepage">LESS homepage</a></li>
<li><a href="" title="http://blog.danielfischer.com/2011/04/18/quickstart-guide-to-using-compass-haml-sass-scss-with-rails-3/' 'Quickstart guide to Sass">Quickstart guide to Sass</a></li>
</ul>


<p>Feel free to leave a comment with your thoughts on Sass. I hope you&rsquo;ve enjoyed this one!</p>
]]></content>
  </entry>
  
</feed>
